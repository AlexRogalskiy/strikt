package strikt.opentest4j

import org.opentest4j.AssertionFailedError
import org.opentest4j.MultipleFailuresError
import org.opentest4j.TestSkippedException
import strikt.api.Status.Failed
import strikt.api.Status.Pending
import strikt.api.reporting.Reportable
import strikt.api.reporting.Result
import strikt.api.reporting.Subject
import strikt.api.reporting.formatValue

fun Reportable.throwOnFailure() {
  root.toError()?.let { throw it }
}

fun Reportable.toError(): Throwable? {
  return when (this) {
    is Result     -> {
      when (status) {
        Failed  -> if (results.isEmpty()) {
          AssertionFailedError(toMessage(), expected, actual, cause)
        } else {
          MultipleFailuresError(toMessage(), results.toErrors())
        }
        Pending -> TestSkippedException(toMessage(), cause)
        else    -> null
      }
    }
    is Subject<*> ->
      when (status) {
        Failed  -> MultipleFailuresError(
          toMessage(),
          results.toErrors()
        )
        Pending -> TestSkippedException(toMessage())
        else    -> null
      }
  }
}

private fun Iterable<Reportable>.toErrors() =
  mapNotNull { it.toError() }

private fun Result.toMessage() =
  description.format(formatValue(expected), formatValue(actual)) +
    (message?.let { " : " + it.format(formatValue(actual)) } ?: "")

private fun Subject<*>.toMessage() =
  description.format(formatValue(value))