package strikt.opentest4j

import org.opentest4j.TestSkippedException
import strikt.api.Status.Failed
import strikt.api.Status.Passed
import strikt.api.Status.Pending
import strikt.api.reporting.Reportable
import strikt.api.reporting.Result
import strikt.api.reporting.Subject
import strikt.api.reporting.writeToString

/**
 * Throws an exception if the overall assertion is has failed.
 */
internal fun Reportable.throwOnFailure() {
  root.toError()?.let { throw it }
}

/**
 * Converts Strikt's model of an assertion result graph into an opentest4j
 * exception.
 */
internal fun Reportable.toError(): Throwable? {
  return when (this) {
    is Result -> when {
      status == Passed -> null
      status == Pending -> TestSkippedException(writeToString(), cause)
      results.isEmpty() -> AtomicAssertionFailure(
        writeToString(),
        expected,
        actual,
        cause
      )
      else -> CompoundAssertionFailure(writeToString(), results.toErrors())
    }
    is Subject<*> -> when (status) {
      Failed -> CompoundAssertionFailure(writeToString(), results.toErrors())
      Pending -> TestSkippedException(writeToString())
      else -> null
    }
  }
}

private fun Iterable<Reportable>.toErrors() =
  mapNotNull { it.toError() }
